# LIC renderer, as a Web Worker
# Steven Ruppert
# CSCI 447 Scientific Visualization Spring 2013 -- Project 3
"use strict"

# binterp into a texture
function binterp texture, x, y, width, height
  # transform to [0, width] [0, height]
  x = (x + 1) * width / 2
  y = (y + 1) * height / 2

  x1 = Math.floor x
  x2 = Math.ceil x
  y1 = Math.floor y
  y2 = Math.ceil y

  if x1 is x
    if y1 is y
      # no interp needed
      return texture[y * height + x] || 0
    else
      # linterp y
      # a
      #
      # b
      a = texture[y1 * height + x] || 0
      b = texture[y2 * height + x] || 0

      return ab = (y2 - y) * a + (y - y1) * b
  else if y1 is y
    # linterp x
    # a  b
    a = texture[y * height + x1] || 0
    b = texture[y * height + x2] || 0

    return ab = (x2 - x) * a + (x - x1) * b
  else
    # bilinterp
    # a  b
    #
    # c  d
    a = texture[y1 * height + x1] || 0
    b = texture[y1 * height + x2] || 0
    c = texture[y2 * height + x1] || 0
    d = texture[y2 * height + x2] || 0

    ab = (x2 - x) * a + (x - x1) * b
    cd = (x2 - x) * c + (x - x1) * d

    return (y2 - y) * ab + (y - y1) * cd

# image is an ImageData object
# texture is an Uint8Array of size width * height
# field-{x|y} are Float32Arrays of size width * height
# distance is how far to follow streamlines (smoothness)
function lic image, texture, field-x, field-y, distance
  {width, height} = image

  bytes = image.data

  p = 0
  m = height * width
  for i til height
    for j til width
      # transform to [-1, 1]
      x = j * 2 / width - 1
      y = i * 2 / height - 1

      tex = 0
      for k from 1 til distance
        tex += binterp texture, x, y, width, height

        dx = binterp field-x, x, y, width, height
        dy = binterp field-y, x, y, width, height

        x += dx / (1 + Math.abs dx) / width
        y += dy / (1 + Math.abs dy) / height

        break unless -1 <= x <= 1 and -1 <= y <= 1

      # walk backwards too
      x = j * 2 / width - 1
      y = i * 2 / height - 1

      for l from k til k + distance
        tex += binterp texture, x, y, width, height

        dx = binterp field-x, x, y, width, height
        dy = binterp field-y, x, y, width, height

        x -= dx / (1 + Math.abs dx) / width
        y -= dy / (1 + Math.abs dy) / height

        break unless -1 <= x <= 1 and -1 <= y <= 1

      # set alpha to texture
      bytes[(i * height + j) * 4 + 3] = tex / l

    p += width
    progress p / m

function progress
  post-message {type: \progress value: it}

function log
  post-message {type: \log message: it}

@onmessage = !({{image, texture, field-x, field-y, distance}: data}) ->
  # lic mutates image
  lic image, texture, field-x, field-y, distance

  # transfer back to main thread
  post-message {image}





