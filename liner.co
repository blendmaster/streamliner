# LIC renderer, as a Web Worker
# Steven Ruppert
# CSCI 447 Scientific Visualization Spring 2013 -- Project 3
"use strict"

$ = -> document.get-element-by-id it

canvas = $ \canvas
{width, height} = canvas
ctx = canvas.get-context \2d

ctx.fill-rect 0 0 width, height

# support image textures
use-noise = $ \noise
  &add-event-listener \change !->
    ctx.fill-rect 0 0 width, height
    gen-noise!
  if &checked
    gen-noise!

use-image = $ \image
  &add-event-listener \change !->
    if $ \file .files.0
      change.call $ \file
    else
      $ \file .click!
$ \file
  &add-event-listener \change change = ->
    if @files.0
      use-image.checked = true
      img = new Image
      img.src = URL.create-object-URL that
      img.onload = ->
        ctx.clear-rect 0 0 width, height
        ctx.draw-image img, 0 0 width, height

  change.call &

$ \clear-image .onclick = !-> $ \file .value = ''

function gen-noise
  image = ctx.get-image-data 0 0 width, height
  # random alpha, RGBA pixels, bytes
  for i from 3 til image.data.length by 4
    image.data[i] = (Math.random! * 255) | 0

  ctx.put-image-data image, 0 0

rendering = false

cancel = $ \cancel
  &onclick = ->
    if rendering
      finish!
btn = $ \render

progress = $ \progress
function finish
  progress.hidden = true
  btn.disabled = false
  use-noise.disabled = false
  use-image.disabled = false
  $ \file .disabled = false
  btn.text-content = \Render
  cancel.hidden = true
  worker?terminate!
  rendering := false

var worker
# firefox saves disabled state, annoying
finish!
<-! btn.add-event-listener \click

rendering := true
btn.text-content = \Rendering...
btn.disabled = true
cancel.hidden = false
use-noise.disabled = true
use-image.disabled = true
$ \file .disabled = true
progress.hidden = false
progress.value = '' # indeterminate

texture = ctx.get-image-data 0, 0 width, height

image = ctx.get-image-data 0 0 width, height

launch-worker = ->
  console.log 'launching worker'
  worker := new Worker \render-worker.js
    # render once finished
    &onmessage = !(e) ->
      if e.data.type is \log
        console.log e.data.message
      else if e.data.type is \progress
        progress.value = e.data.value
      else
        # got image
        ctx.clear-rect 0 0, width, height
        ctx.put-image-data e.data.image, 0 0
        finish!

    # start LIC
    distance = parse-int ($ \distance .value), 10 or 10
    &post-message {image, texture, field-x, field-y, distance}

# create 2D vector field
field-x = new Float32Array width * height
field-y = new Float32Array width * height
if $ \sine .checked
  for i til height
    for j til width
      # transform to [-1, 1]
      x = j * 2 / width - 1
      y = i * 2 / height - 1

      field-x[i * height + j] = Math.sin 5 * x + y
      field-y[i * height + j] = Math.cos 2 * x + 6 * y
  launch-worker!
else if $ \circle .checked
  for i til height
    for j til width
      # transform to [-1, 1]
      x = j * 2 / width - 1
      y = i * 2 / height - 1

      field-x[i * height + j] = -y
      field-y[i * height + j] = x
  launch-worker!
else
  # ocean data
  fx = $ \field-x .files.0
  fy = $ \field-y .files.0
  xloaded = yloaded = false
  unless fx and fy
    alert 'please select the ocean data files first!'
    return finish!

  # these are huge files, I hope firefox doesn't choke
  f = new FileReader
  f.onload = ->
    console.log 'read ocean x'
    ocean-x = new Float32Array @result

    # reduce to width x height field, so I don't have to deal with the larger size
    for i til height
      for j til width
        # ocean data is reversed for some reason
        y = height - i
        x = j
        field-x[i * height + j] = ocean-x[x + y * 1440]

    # null reference just in case of leaks
    ocean-x = null

    xloaded := true
    if yloaded
      # hack: zero out texture alpha when field is 0
      for i til height
        for j til width
          if field-x[i * height + j] is 0 and field-y[i * height + j] is 0
            texture.data[(i * height + j) * 4 + 3] = 0

      launch-worker!
  f.read-as-array-buffer fx

  f = new FileReader
  f.onload = ->
    console.log 'read ocean y'
    ocean-y = new Float32Array @result

    # reduce to width x height field
    for i til height
      for j til width
        y = height - i
        x = j
        field-y[i * height + j] = ocean-y[x + y * 1440]

    # null reference just in case
    ocean-y = null

    yloaded := true
    if xloaded
      # hack: zero out texture alpha when field is 0
      for i til height
        for j til width
          if field-x[i * height + j] is 0 and field-y[i * height + j] is 0
            texture.data[(i * height + j) * 4 + 3] = 0
      launch-worker!
  f.read-as-array-buffer fy
